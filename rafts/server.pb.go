// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// AppendEntries 用于Leader节点复制日志给其他节点，也作为心跳
//
// prevLogIndex和prevLogTerm表示上一次发送的日志的索引和任期，用于保证收到的日志是连续的
type AppendEntries struct {
	// Leader节点的任期
	Term int32 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Leader节点的ID
	LeaderId string `protobuf:"bytes,2,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	// 此次追加请求的上一个日志的索引
	PrevLogIndex int64 `protobuf:"varint,3,opt,name=prevLogIndex,proto3" json:"prevLogIndex,omitempty"`
	// 此次追加请求的上一个日志的任期
	PrevLogTerm int32 `protobuf:"varint,4,opt,name=prevLogTerm,proto3" json:"prevLogTerm,omitempty"`
	// 追加的日志（空则为心跳请求）
	Entries []*Entry `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	// Leader上已经Commit的Index
	LeaderCommit         int64    `protobuf:"varint,6,opt,name=leaderCommit,proto3" json:"leaderCommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntries) Reset()         { *m = AppendEntries{} }
func (m *AppendEntries) String() string { return proto.CompactTextString(m) }
func (*AppendEntries) ProtoMessage()    {}
func (*AppendEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *AppendEntries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntries.Unmarshal(m, b)
}
func (m *AppendEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntries.Marshal(b, m, deterministic)
}
func (m *AppendEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntries.Merge(m, src)
}
func (m *AppendEntries) XXX_Size() int {
	return xxx_messageInfo_AppendEntries.Size(m)
}
func (m *AppendEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntries.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntries proto.InternalMessageInfo

func (m *AppendEntries) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntries) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntries) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntries) GetPrevLogTerm() int32 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntries) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntries) GetLeaderCommit() int64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

// Entry 日志条目内容
type Entry struct {
	// 指令索引
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// 同步指令
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// 服务器的任期，初始为0，递增
	Term                 int32    `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Entry) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Entry) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

// appendReturn 接收者实现逻辑
//
// 返回false，如果收到的任期比当前任期小
//
// 返回false，如果不包含之前的日志条目（没有匹配prevLogIndex和prevLogTerm）
//
// 如果存在index相同但是term不相同的日志，删除从该位置开始所有的日志
//
// 追加所有不存在的日志
//
// 如果leaderCommit>commitIndex，将commitIndex设置为commitIndex = min(leaderCommit, index of last new entry)
type AppendEntriesReturn struct {
	// 当前任期号，用于Leader节点更新自己的任期（应该说是如果这个返回值比Leader自身的任期大，那么Leader需要更新自己的任期）
	Term int32 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// 如果Follower节点匹配prevLogIndex和prevLogTerm，返回true
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesReturn) Reset()         { *m = AppendEntriesReturn{} }
func (m *AppendEntriesReturn) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesReturn) ProtoMessage()    {}
func (*AppendEntriesReturn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *AppendEntriesReturn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesReturn.Unmarshal(m, b)
}
func (m *AppendEntriesReturn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesReturn.Marshal(b, m, deterministic)
}
func (m *AppendEntriesReturn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesReturn.Merge(m, src)
}
func (m *AppendEntriesReturn) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesReturn.Size(m)
}
func (m *AppendEntriesReturn) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesReturn.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesReturn proto.InternalMessageInfo

func (m *AppendEntriesReturn) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReturn) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// reqVote 用于Candidate获取选票
type ReqVote struct {
	// Candidate的任期
	Term int32 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Candidate的ID
	CandidateId string `protobuf:"bytes,2,opt,name=candidateId,proto3" json:"candidateId,omitempty"`
	// Candidate最后一条日志的索引
	LastLogIndex int64 `protobuf:"varint,3,opt,name=lastLogIndex,proto3" json:"lastLogIndex,omitempty"`
	// Candidate最后一条日志的任期
	LastLogTerm          int32    `protobuf:"varint,4,opt,name=lastLogTerm,proto3" json:"lastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqVote) Reset()         { *m = ReqVote{} }
func (m *ReqVote) String() string { return proto.CompactTextString(m) }
func (*ReqVote) ProtoMessage()    {}
func (*ReqVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{3}
}

func (m *ReqVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqVote.Unmarshal(m, b)
}
func (m *ReqVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqVote.Marshal(b, m, deterministic)
}
func (m *ReqVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqVote.Merge(m, src)
}
func (m *ReqVote) XXX_Size() int {
	return xxx_messageInfo_ReqVote.Size(m)
}
func (m *ReqVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqVote.DiscardUnknown(m)
}

var xxx_messageInfo_ReqVote proto.InternalMessageInfo

func (m *ReqVote) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ReqVote) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *ReqVote) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *ReqVote) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

// 接收者的实现逻辑
//
// 返回false，如果收到的任期比当前任期小
//
// 如果本地状态中votedFor为null或者candidateId，且candidate的日志等于或多余（按照index判断）接收者的日志，则接收者投票给candidate，即返回true
type ReqVoteReturn struct {
	// 当前任期，用于Candidate更新自己的任期
	Term int32 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// true表示给Candidate投票
	VoteGranted          bool     `protobuf:"varint,2,opt,name=voteGranted,proto3" json:"voteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqVoteReturn) Reset()         { *m = ReqVoteReturn{} }
func (m *ReqVoteReturn) String() string { return proto.CompactTextString(m) }
func (*ReqVoteReturn) ProtoMessage()    {}
func (*ReqVoteReturn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{4}
}

func (m *ReqVoteReturn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqVoteReturn.Unmarshal(m, b)
}
func (m *ReqVoteReturn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqVoteReturn.Marshal(b, m, deterministic)
}
func (m *ReqVoteReturn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqVoteReturn.Merge(m, src)
}
func (m *ReqVoteReturn) XXX_Size() int {
	return xxx_messageInfo_ReqVoteReturn.Size(m)
}
func (m *ReqVoteReturn) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqVoteReturn.DiscardUnknown(m)
}

var xxx_messageInfo_ReqVoteReturn proto.InternalMessageInfo

func (m *ReqVoteReturn) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ReqVoteReturn) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func init() {
	proto.RegisterType((*AppendEntries)(nil), "raft.appendEntries")
	proto.RegisterType((*Entry)(nil), "raft.entry")
	proto.RegisterType((*AppendEntriesReturn)(nil), "raft.appendEntriesReturn")
	proto.RegisterType((*ReqVote)(nil), "raft.reqVote")
	proto.RegisterType((*ReqVoteReturn)(nil), "raft.reqVoteReturn")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x6f, 0xa3, 0x40,
	0x10, 0x85, 0x8f, 0x03, 0x8c, 0x3d, 0xd8, 0xcd, 0xfa, 0x0a, 0xce, 0x15, 0x42, 0x3a, 0x89, 0xca,
	0x85, 0x5d, 0x5f, 0x13, 0xcb, 0x8a, 0xac, 0xa4, 0x42, 0x51, 0xfa, 0x0d, 0x8c, 0x13, 0xa4, 0xc0,
	0xe2, 0xdd, 0xb1, 0x95, 0xa4, 0xcf, 0xff, 0xcb, 0x4f, 0x8a, 0xd8, 0x05, 0x67, 0x89, 0xac, 0x74,
	0xbc, 0x8f, 0xdd, 0x99, 0xf7, 0x1e, 0xc0, 0x54, 0xa1, 0x3c, 0xa1, 0x5c, 0x36, 0x52, 0x90, 0x60,
	0x9e, 0xe4, 0x7b, 0x4a, 0x3e, 0x1c, 0x98, 0xf1, 0xa6, 0xc1, 0xba, 0xd8, 0xd6, 0x24, 0x4b, 0x54,
	0x8c, 0x81, 0x47, 0x28, 0xab, 0xc8, 0x89, 0x9d, 0xd4, 0xcf, 0xf4, 0x33, 0x5b, 0xc0, 0xf8, 0x19,
	0x79, 0x81, 0x72, 0x57, 0x44, 0xbf, 0x63, 0x27, 0x9d, 0x64, 0x67, 0xcd, 0x12, 0x98, 0x36, 0x12,
	0x4f, 0xb7, 0xe2, 0x71, 0x57, 0x17, 0xf8, 0x12, 0xb9, 0xb1, 0x93, 0xba, 0xd9, 0x80, 0xb1, 0x18,
	0xc2, 0x4e, 0xdf, 0xb5, 0xa3, 0x3d, 0x3d, 0xda, 0x46, 0xec, 0x1f, 0x04, 0x68, 0x0c, 0x44, 0x7e,
	0xec, 0xa6, 0xe1, 0x2a, 0x5c, 0xb6, 0xfe, 0x96, 0x2d, 0x7c, 0xcd, 0xfa, 0x77, 0xed, 0x32, 0xb3,
	0x78, 0x23, 0xaa, 0xaa, 0xa4, 0x68, 0x64, 0x96, 0xd9, 0x2c, 0xb9, 0x01, 0x5f, 0xdf, 0x62, 0x7f,
	0xc0, 0x2f, 0xb5, 0x25, 0x47, 0x9f, 0x32, 0x82, 0x45, 0x10, 0xe4, 0xa2, 0xaa, 0x78, 0xdd, 0x47,
	0xe9, 0xe5, 0x39, 0xb9, 0xfb, 0x95, 0x3c, 0xd9, 0xc0, 0x7c, 0x50, 0x4f, 0x86, 0x74, 0x94, 0xf5,
	0xc5, 0x92, 0x22, 0x08, 0xd4, 0x31, 0xcf, 0x51, 0x29, 0x3d, 0x78, 0x9c, 0xf5, 0x32, 0x79, 0x77,
	0x20, 0x90, 0x78, 0xb8, 0x17, 0x84, 0x17, 0x6f, 0xc6, 0x10, 0xe6, 0xbc, 0x2e, 0xca, 0x82, 0x13,
	0x9e, 0x1b, 0xb6, 0x91, 0xce, 0xcd, 0x15, 0x7d, 0x2f, 0xd9, 0x66, 0xed, 0x94, 0x4e, 0xdb, 0x25,
	0x5b, 0x28, 0xd9, 0xc2, 0xac, 0xb3, 0xf1, 0x43, 0x8c, 0x18, 0xc2, 0x93, 0x20, 0xbc, 0x96, 0xbc,
	0x26, 0x2c, 0xba, 0x28, 0x36, 0x5a, 0xbd, 0x81, 0x97, 0xf1, 0x3d, 0xb1, 0xff, 0x30, 0x79, 0x42,
	0x2e, 0xe9, 0x0a, 0x39, 0xb1, 0xb9, 0xf9, 0x5e, 0x83, 0xb2, 0x16, 0x7f, 0x2f, 0x40, 0xb3, 0x3a,
	0xf9, 0xc5, 0xd6, 0x10, 0x4a, 0x3c, 0x1c, 0x51, 0x91, 0x2e, 0x66, 0x66, 0xce, 0x76, 0x06, 0x17,
	0xf3, 0x81, 0xec, 0x2f, 0x3d, 0x8c, 0xf4, 0xcf, 0xbb, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x86,
	0x68, 0x24, 0x54, 0xcc, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	// HeartBeat 发送心跳
	HeartBeat(ctx context.Context, in *AppendEntries, opts ...grpc.CallOption) (*AppendEntriesReturn, error)
	// RequestVote 发起选举，索要选票
	RequestVote(ctx context.Context, in *ReqVote, opts ...grpc.CallOption) (*ReqVoteReturn, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) HeartBeat(ctx context.Context, in *AppendEntries, opts ...grpc.CallOption) (*AppendEntriesReturn, error) {
	out := new(AppendEntriesReturn)
	err := c.cc.Invoke(ctx, "/raft.Raft/heartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *ReqVote, opts ...grpc.CallOption) (*ReqVoteReturn, error) {
	out := new(ReqVoteReturn)
	err := c.cc.Invoke(ctx, "/raft.Raft/requestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	// HeartBeat 发送心跳
	HeartBeat(context.Context, *AppendEntries) (*AppendEntriesReturn, error)
	// RequestVote 发起选举，索要选票
	RequestVote(context.Context, *ReqVote) (*ReqVoteReturn, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).HeartBeat(ctx, req.(*AppendEntries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*ReqVote))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "heartBeat",
			Handler:    _Raft_HeartBeat_Handler,
		},
		{
			MethodName: "requestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
