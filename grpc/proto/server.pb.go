// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/server.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("grpc/proto/server.proto", fileDescriptor_9f9189b3c96cae45) }

var fileDescriptor_9f9189b3c96cae45 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x14, 0x45, 0xa3, 0xd4, 0xd6, 0x3c, 0x4d, 0x29, 0x4f, 0x41, 0x99, 0x65, 0x36, 0x22, 0x96, 0x44,
	0xaa, 0xb8, 0xd7, 0xb7, 0xaa, 0xb8, 0x11, 0xf1, 0x03, 0x62, 0xf2, 0x88, 0xc1, 0x30, 0x13, 0x26,
	0xd3, 0x42, 0xbf, 0xc4, 0x8f, 0xf3, 0x67, 0x64, 0x92, 0x31, 0x24, 0x8d, 0xab, 0x70, 0xef, 0x39,
	0x93, 0x3b, 0x03, 0x17, 0xb9, 0xae, 0xd2, 0xb8, 0xd2, 0xca, 0xa8, 0xb8, 0x66, 0xbd, 0x65, 0x1d,
	0x35, 0x01, 0x8f, 0x9a, 0x8f, 0xe8, 0x73, 0xcd, 0xf5, 0xa6, 0x34, 0x2d, 0x17, 0x97, 0x3d, 0x90,
	0x7e, 0x26, 0x52, 0x72, 0xe9, 0x88, 0x18, 0x92, 0x42, 0xa6, 0x2a, 0xe3, 0x96, 0xad, 0xbe, 0x0f,
	0x60, 0x46, 0xad, 0x8d, 0x31, 0x4c, 0x49, 0x73, 0x62, 0x18, 0xcf, 0x5b, 0x1a, 0x39, 0xd2, 0xb6,
	0x22, 0x70, 0xed, 0x9b, 0xd1, 0x85, 0xcc, 0x43, 0x0f, 0x6f, 0x60, 0xf2, 0xac, 0x0a, 0x89, 0x38,
	0xd4, 0x6d, 0x37, 0x96, 0x23, 0x98, 0xbc, 0x14, 0xb5, 0xd9, 0x97, 0x6d, 0x27, 0x16, 0x03, 0xf9,
	0x51, 0xeb, 0xd0, 0x5b, 0xfd, 0x1c, 0x82, 0x4f, 0xf6, 0xb6, 0xa4, 0x32, 0xc6, 0x25, 0xf8, 0x6b,
	0x59, 0x9b, 0xa4, 0x2c, 0x89, 0x70, 0xee, 0x74, 0xd7, 0x8c, 0xb7, 0x6e, 0xe1, 0xc4, 0x31, 0xce,
	0x88, 0x70, 0x31, 0xf4, 0x39, 0xeb, 0x4e, 0x10, 0xd9, 0xfd, 0xd0, 0xc3, 0x7b, 0x08, 0x1a, 0x2a,
	0x4d, 0x91, 0x18, 0x26, 0xea, 0xae, 0xd9, 0x6b, 0xc7, 0x3b, 0x0f, 0x30, 0xef, 0x71, 0x3b, 0x75,
	0x36, 0x3e, 0xf6, 0xcf, 0xda, 0x12, 0xfc, 0xf7, 0x2a, 0xd7, 0x49, 0xc6, 0xbd, 0xd7, 0xb8, 0x66,
	0xbc, 0x72, 0x0d, 0xc7, 0x6b, 0xb9, 0x55, 0x5f, 0x56, 0x0e, 0xba, 0xff, 0xdb, 0x42, 0x9c, 0xba,
	0xf8, 0xb4, 0x33, 0x5c, 0x87, 0x1e, 0x5e, 0xc1, 0xec, 0x75, 0xc3, 0x7a, 0x47, 0x84, 0x7f, 0xa8,
	0xc9, 0xfb, 0xe2, 0xc7, 0xb4, 0x89, 0x77, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x54, 0x30,
	0x75, 0x6f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChannelClient is the client API for Channel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelClient interface {
	Create(ctx context.Context, in *ChannelCreate, opts ...grpc.CallOption) (*String, error)
	Join(ctx context.Context, in *ChannelJoin, opts ...grpc.CallOption) (*String, error)
	List(ctx context.Context, in *ChannelList, opts ...grpc.CallOption) (*StringArr, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Create(ctx context.Context, in *ChannelCreate, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.Channel/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Join(ctx context.Context, in *ChannelJoin, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.Channel/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) List(ctx context.Context, in *ChannelList, opts ...grpc.CallOption) (*StringArr, error) {
	out := new(StringArr)
	err := c.cc.Invoke(ctx, "/proto.Channel/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServer is the server API for Channel service.
type ChannelServer interface {
	Create(context.Context, *ChannelCreate) (*String, error)
	Join(context.Context, *ChannelJoin) (*String, error)
	List(context.Context, *ChannelList) (*StringArr, error)
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Channel/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Create(ctx, req.(*ChannelCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Channel/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Join(ctx, req.(*ChannelJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Channel/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).List(ctx, req.(*ChannelList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Channel_Create_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Channel_Join_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Channel_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/server.proto",
}

// ChainCodeClient is the client API for ChainCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainCodeClient interface {
	InstallCC(ctx context.Context, in *Install, opts ...grpc.CallOption) (*String, error)
	InstalledCC(ctx context.Context, in *Installed, opts ...grpc.CallOption) (*CCList, error)
	InstantiateCC(ctx context.Context, in *Instantiate, opts ...grpc.CallOption) (*String, error)
	InstantiatedCC(ctx context.Context, in *Instantiated, opts ...grpc.CallOption) (*CCList, error)
	UpgradeCC(ctx context.Context, in *Upgrade, opts ...grpc.CallOption) (*String, error)
	InvokeCC(ctx context.Context, in *Invoke, opts ...grpc.CallOption) (*Bytes, error)
	QueryCC(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Bytes, error)
}

type chainCodeClient struct {
	cc *grpc.ClientConn
}

func NewChainCodeClient(cc *grpc.ClientConn) ChainCodeClient {
	return &chainCodeClient{cc}
}

func (c *chainCodeClient) InstallCC(ctx context.Context, in *Install, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.ChainCode/InstallCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCodeClient) InstalledCC(ctx context.Context, in *Installed, opts ...grpc.CallOption) (*CCList, error) {
	out := new(CCList)
	err := c.cc.Invoke(ctx, "/proto.ChainCode/InstalledCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCodeClient) InstantiateCC(ctx context.Context, in *Instantiate, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.ChainCode/InstantiateCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCodeClient) InstantiatedCC(ctx context.Context, in *Instantiated, opts ...grpc.CallOption) (*CCList, error) {
	out := new(CCList)
	err := c.cc.Invoke(ctx, "/proto.ChainCode/InstantiatedCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCodeClient) UpgradeCC(ctx context.Context, in *Upgrade, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.ChainCode/UpgradeCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCodeClient) InvokeCC(ctx context.Context, in *Invoke, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/proto.ChainCode/InvokeCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCodeClient) QueryCC(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/proto.ChainCode/QueryCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainCodeServer is the server API for ChainCode service.
type ChainCodeServer interface {
	InstallCC(context.Context, *Install) (*String, error)
	InstalledCC(context.Context, *Installed) (*CCList, error)
	InstantiateCC(context.Context, *Instantiate) (*String, error)
	InstantiatedCC(context.Context, *Instantiated) (*CCList, error)
	UpgradeCC(context.Context, *Upgrade) (*String, error)
	InvokeCC(context.Context, *Invoke) (*Bytes, error)
	QueryCC(context.Context, *Query) (*Bytes, error)
}

func RegisterChainCodeServer(s *grpc.Server, srv ChainCodeServer) {
	s.RegisterService(&_ChainCode_serviceDesc, srv)
}

func _ChainCode_InstallCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Install)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCodeServer).InstallCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChainCode/InstallCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCodeServer).InstallCC(ctx, req.(*Install))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCode_InstalledCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Installed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCodeServer).InstalledCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChainCode/InstalledCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCodeServer).InstalledCC(ctx, req.(*Installed))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCode_InstantiateCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instantiate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCodeServer).InstantiateCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChainCode/InstantiateCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCodeServer).InstantiateCC(ctx, req.(*Instantiate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCode_InstantiatedCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instantiated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCodeServer).InstantiatedCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChainCode/InstantiatedCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCodeServer).InstantiatedCC(ctx, req.(*Instantiated))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCode_UpgradeCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Upgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCodeServer).UpgradeCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChainCode/UpgradeCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCodeServer).UpgradeCC(ctx, req.(*Upgrade))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCode_InvokeCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCodeServer).InvokeCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChainCode/InvokeCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCodeServer).InvokeCC(ctx, req.(*Invoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCode_QueryCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCodeServer).QueryCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChainCode/QueryCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCodeServer).QueryCC(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainCode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChainCode",
	HandlerType: (*ChainCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallCC",
			Handler:    _ChainCode_InstallCC_Handler,
		},
		{
			MethodName: "InstalledCC",
			Handler:    _ChainCode_InstalledCC_Handler,
		},
		{
			MethodName: "InstantiateCC",
			Handler:    _ChainCode_InstantiateCC_Handler,
		},
		{
			MethodName: "InstantiatedCC",
			Handler:    _ChainCode_InstantiatedCC_Handler,
		},
		{
			MethodName: "UpgradeCC",
			Handler:    _ChainCode_UpgradeCC_Handler,
		},
		{
			MethodName: "InvokeCC",
			Handler:    _ChainCode_InvokeCC_Handler,
		},
		{
			MethodName: "QueryCC",
			Handler:    _ChainCode_QueryCC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/server.proto",
}
