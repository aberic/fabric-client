// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/channel.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChannelCreate struct {
	ConfigID             string   `protobuf:"bytes,1,opt,name=configID,proto3" json:"configID,omitempty"`
	OrderOrgName         string   `protobuf:"bytes,2,opt,name=orderOrgName,proto3" json:"orderOrgName,omitempty"`
	OrgName              string   `protobuf:"bytes,3,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgUser              string   `protobuf:"bytes,4,opt,name=orgUser,proto3" json:"orgUser,omitempty"`
	ChannelID            string   `protobuf:"bytes,5,opt,name=channelID,proto3" json:"channelID,omitempty"`
	ChannelConfigPath    string   `protobuf:"bytes,6,opt,name=channelConfigPath,proto3" json:"channelConfigPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelCreate) Reset()         { *m = ChannelCreate{} }
func (m *ChannelCreate) String() string { return proto.CompactTextString(m) }
func (*ChannelCreate) ProtoMessage()    {}
func (*ChannelCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_056b8b10491c9602, []int{0}
}

func (m *ChannelCreate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelCreate.Unmarshal(m, b)
}
func (m *ChannelCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelCreate.Marshal(b, m, deterministic)
}
func (m *ChannelCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCreate.Merge(m, src)
}
func (m *ChannelCreate) XXX_Size() int {
	return xxx_messageInfo_ChannelCreate.Size(m)
}
func (m *ChannelCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCreate proto.InternalMessageInfo

func (m *ChannelCreate) GetConfigID() string {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

func (m *ChannelCreate) GetOrderOrgName() string {
	if m != nil {
		return m.OrderOrgName
	}
	return ""
}

func (m *ChannelCreate) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *ChannelCreate) GetOrgUser() string {
	if m != nil {
		return m.OrgUser
	}
	return ""
}

func (m *ChannelCreate) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *ChannelCreate) GetChannelConfigPath() string {
	if m != nil {
		return m.ChannelConfigPath
	}
	return ""
}

type ChannelJoin struct {
	ConfigID             string   `protobuf:"bytes,1,opt,name=configID,proto3" json:"configID,omitempty"`
	OrderName            string   `protobuf:"bytes,2,opt,name=orderName,proto3" json:"orderName,omitempty"`
	OrgName              string   `protobuf:"bytes,3,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgUser              string   `protobuf:"bytes,4,opt,name=orgUser,proto3" json:"orgUser,omitempty"`
	ChannelID            string   `protobuf:"bytes,5,opt,name=channelID,proto3" json:"channelID,omitempty"`
	PeerUrl              string   `protobuf:"bytes,6,opt,name=peerUrl,proto3" json:"peerUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelJoin) Reset()         { *m = ChannelJoin{} }
func (m *ChannelJoin) String() string { return proto.CompactTextString(m) }
func (*ChannelJoin) ProtoMessage()    {}
func (*ChannelJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_056b8b10491c9602, []int{1}
}

func (m *ChannelJoin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelJoin.Unmarshal(m, b)
}
func (m *ChannelJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelJoin.Marshal(b, m, deterministic)
}
func (m *ChannelJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelJoin.Merge(m, src)
}
func (m *ChannelJoin) XXX_Size() int {
	return xxx_messageInfo_ChannelJoin.Size(m)
}
func (m *ChannelJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelJoin.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelJoin proto.InternalMessageInfo

func (m *ChannelJoin) GetConfigID() string {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

func (m *ChannelJoin) GetOrderName() string {
	if m != nil {
		return m.OrderName
	}
	return ""
}

func (m *ChannelJoin) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *ChannelJoin) GetOrgUser() string {
	if m != nil {
		return m.OrgUser
	}
	return ""
}

func (m *ChannelJoin) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *ChannelJoin) GetPeerUrl() string {
	if m != nil {
		return m.PeerUrl
	}
	return ""
}

type ChannelList struct {
	ConfigID             string   `protobuf:"bytes,1,opt,name=configID,proto3" json:"configID,omitempty"`
	OrgName              string   `protobuf:"bytes,2,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgUser              string   `protobuf:"bytes,3,opt,name=orgUser,proto3" json:"orgUser,omitempty"`
	PeerName             string   `protobuf:"bytes,4,opt,name=peerName,proto3" json:"peerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelList) Reset()         { *m = ChannelList{} }
func (m *ChannelList) String() string { return proto.CompactTextString(m) }
func (*ChannelList) ProtoMessage()    {}
func (*ChannelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_056b8b10491c9602, []int{2}
}

func (m *ChannelList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelList.Unmarshal(m, b)
}
func (m *ChannelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelList.Marshal(b, m, deterministic)
}
func (m *ChannelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelList.Merge(m, src)
}
func (m *ChannelList) XXX_Size() int {
	return xxx_messageInfo_ChannelList.Size(m)
}
func (m *ChannelList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelList.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelList proto.InternalMessageInfo

func (m *ChannelList) GetConfigID() string {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

func (m *ChannelList) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *ChannelList) GetOrgUser() string {
	if m != nil {
		return m.OrgUser
	}
	return ""
}

func (m *ChannelList) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func init() {
	proto.RegisterType((*ChannelCreate)(nil), "proto.ChannelCreate")
	proto.RegisterType((*ChannelJoin)(nil), "proto.ChannelJoin")
	proto.RegisterType((*ChannelList)(nil), "proto.ChannelList")
}

func init() { proto.RegisterFile("grpc/proto/channel.proto", fileDescriptor_056b8b10491c9602) }

var fileDescriptor_056b8b10491c9602 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x4f, 0x4a, 0xc3, 0x40,
	0x14, 0xc6, 0x9b, 0x36, 0x4d, 0x9a, 0xa7, 0x05, 0x1d, 0x04, 0x87, 0xd0, 0x85, 0xcc, 0x4a, 0x50,
	0x12, 0xd0, 0x13, 0x48, 0xba, 0xa9, 0x88, 0x8a, 0xd2, 0x03, 0xc4, 0x38, 0xa6, 0x81, 0x98, 0x09,
	0x2f, 0xe3, 0xc2, 0x93, 0x78, 0x10, 0x0f, 0xe2, 0x95, 0x24, 0x2f, 0xd3, 0x34, 0xb1, 0xd8, 0x5d,
	0x57, 0xe1, 0xfb, 0x33, 0xcc, 0xef, 0x0b, 0x03, 0x3c, 0xc5, 0x32, 0x09, 0x4b, 0x54, 0x5a, 0x85,
	0xc9, 0x2a, 0x2e, 0x0a, 0x99, 0x07, 0xa4, 0xd8, 0x98, 0x3e, 0xfe, 0x69, 0xa7, 0x80, 0xb2, 0xfa,
	0xc8, 0x75, 0x93, 0x8b, 0x1f, 0x0b, 0xa6, 0x51, 0x73, 0x22, 0x42, 0x19, 0x6b, 0xc9, 0x7c, 0x98,
	0x24, 0xaa, 0x78, 0xcb, 0xd2, 0xc5, 0x9c, 0x5b, 0x67, 0xd6, 0xb9, 0xf7, 0xd4, 0x6a, 0x26, 0xe0,
	0x50, 0xe1, 0xab, 0xc4, 0x07, 0x4c, 0xef, 0xe3, 0x77, 0xc9, 0x87, 0x94, 0xf7, 0x3c, 0xc6, 0xc1,
	0x55, 0x26, 0x1e, 0x51, 0xbc, 0x96, 0x26, 0x59, 0x56, 0x12, 0xb9, 0xdd, 0x26, 0xb5, 0x64, 0x33,
	0xf0, 0x0c, 0xf6, 0x62, 0xce, 0xc7, 0x94, 0x6d, 0x0c, 0x76, 0x09, 0xc7, 0x46, 0x44, 0x04, 0xf2,
	0x18, 0xeb, 0x15, 0x77, 0xa8, 0xb5, 0x1d, 0x88, 0x6f, 0x0b, 0x0e, 0xcc, 0xa2, 0x5b, 0x95, 0x15,
	0x3b, 0xf7, 0xcc, 0xc0, 0x23, 0xf6, 0xce, 0x98, 0x8d, 0xb1, 0x87, 0x25, 0x1c, 0xdc, 0x52, 0x4a,
	0x5c, 0x62, 0x6e, 0xf8, 0xd7, 0x52, 0x7c, 0xb6, 0xd0, 0x77, 0x59, 0xa5, 0x77, 0x42, 0x77, 0xb0,
	0x86, 0xff, 0x62, 0x8d, 0xfa, 0x58, 0x3e, 0x4c, 0xea, 0x9b, 0xe8, 0x50, 0x43, 0xdc, 0xea, 0xab,
	0x2f, 0x0b, 0x5c, 0x73, 0x37, 0x0b, 0xc1, 0x31, 0xcf, 0xe0, 0xa4, 0x79, 0x20, 0x41, 0xef, 0x71,
	0xf8, 0x53, 0xe3, 0x3e, 0x6b, 0xcc, 0x8a, 0x54, 0x0c, 0xd8, 0x05, 0xd8, 0xf4, 0x97, 0x59, 0xbf,
	0x5e, 0x7b, 0xdb, 0xe5, 0x00, 0x6c, 0x5a, 0xf7, 0xa7, 0x5c, 0x7b, 0xfe, 0x51, 0xaf, 0x7c, 0x83,
	0x28, 0x06, 0x2f, 0x0e, 0x59, 0xd7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x33, 0x92, 0xbe, 0xc5,
	0xdf, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChannelClient is the client API for Channel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelClient interface {
	Create(ctx context.Context, in *ChannelCreate, opts ...grpc.CallOption) (*String, error)
	Join(ctx context.Context, in *ChannelJoin, opts ...grpc.CallOption) (*String, error)
	List(ctx context.Context, in *ChannelList, opts ...grpc.CallOption) (*StringArr, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Create(ctx context.Context, in *ChannelCreate, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.Channel/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) Join(ctx context.Context, in *ChannelJoin, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.Channel/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) List(ctx context.Context, in *ChannelList, opts ...grpc.CallOption) (*StringArr, error) {
	out := new(StringArr)
	err := c.cc.Invoke(ctx, "/proto.Channel/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServer is the server API for Channel service.
type ChannelServer interface {
	Create(context.Context, *ChannelCreate) (*String, error)
	Join(context.Context, *ChannelJoin) (*String, error)
	List(context.Context, *ChannelList) (*StringArr, error)
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Channel/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Create(ctx, req.(*ChannelCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Channel/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).Join(ctx, req.(*ChannelJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Channel/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).List(ctx, req.(*ChannelList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Channel_Create_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Channel_Join_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Channel_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/channel.proto",
}
