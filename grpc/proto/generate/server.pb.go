// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/generate/server.proto

package generate

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("grpc/proto/generate/server.proto", fileDescriptor_4a0d3d885d36b862) }

var fileDescriptor_4a0d3d885d36b862 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x5f, 0x4b, 0xf3, 0x30,
	0x14, 0xc6, 0x73, 0xf1, 0xf2, 0x32, 0x32, 0x50, 0x8c, 0x53, 0x31, 0x82, 0x68, 0x2e, 0x05, 0x33,
	0xd0, 0x2f, 0x20, 0x0b, 0x3a, 0xc4, 0xb1, 0x89, 0x7f, 0x6e, 0xbc, 0xeb, 0xea, 0x59, 0x2d, 0x8e,
	0xa4, 0x9e, 0x54, 0x71, 0x1f, 0xd1, 0x6f, 0x25, 0x59, 0x9b, 0xda, 0xae, 0xe9, 0x5d, 0xfa, 0xfc,
	0x4e, 0x7e, 0x3c, 0xa4, 0x87, 0x9e, 0x24, 0x98, 0xc5, 0xc3, 0x0c, 0x4d, 0x6e, 0x86, 0x09, 0x68,
	0xc0, 0x28, 0x87, 0xa1, 0x05, 0xfc, 0x02, 0x94, 0xeb, 0x94, 0xf5, 0x7c, 0xcc, 0x8f, 0x43, 0xb3,
	0x31, 0x60, 0x5e, 0x4c, 0xf2, 0xd3, 0x10, 0x77, 0x07, 0x9b, 0xda, 0x62, 0xe4, 0xe2, 0xe7, 0x1f,
	0xed, 0x8d, 0x4b, 0xc4, 0x14, 0xdd, 0xf2, 0x67, 0x85, 0xab, 0x2c, 0x37, 0x6c, 0x5f, 0xfa, 0x7b,
	0xf2, 0x01, 0x3e, 0xee, 0x60, 0xa5, 0x8c, 0x5e, 0xa4, 0x09, 0x3f, 0xa8, 0xe7, 0x36, 0xab, 0x80,
	0x20, 0xec, 0xf6, 0x4f, 0x32, 0x81, 0x28, 0xf9, 0x04, 0x76, 0xd8, 0x90, 0x28, 0x84, 0x0a, 0x71,
	0xde, 0xf4, 0xd4, 0x99, 0x20, 0xec, 0x8a, 0xf6, 0xbd, 0x6a, 0x86, 0xc9, 0x46, 0x99, 0x62, 0x76,
	0x86, 0xad, 0x32, 0x15, 0x68, 0x1a, 0x94, 0xc5, 0xa0, 0x41, 0x59, 0x0c, 0x1b, 0x94, 0x45, 0x41,
	0xd8, 0x84, 0x6e, 0xd7, 0x3a, 0x4c, 0xcd, 0x2b, 0x30, 0x1e, 0xee, 0xe1, 0x18, 0x3f, 0xea, 0xe8,
	0xe2, 0x60, 0xcb, 0xf6, 0x6c, 0x01, 0xbb, 0x6c, 0x8e, 0x75, 0xda, 0x1c, 0x14, 0x84, 0x5d, 0xd3,
	0x81, 0xb7, 0x8d, 0x8b, 0xbf, 0x3a, 0x5a, 0x9a, 0xf8, 0x9d, 0x0d, 0x1a, 0xca, 0x12, 0xf1, 0xbd,
	0xa6, 0xac, 0x8c, 0x05, 0x61, 0x37, 0x74, 0xa7, 0x7a, 0xa4, 0xb7, 0x48, 0x6b, 0x58, 0x3e, 0x7d,
	0x6f, 0x3e, 0x95, 0xcf, 0x5b, 0x4f, 0xe5, 0x81, 0x20, 0xa3, 0x29, 0x3d, 0x4b, 0x8d, 0x04, 0xad,
	0x8d, 0x91, 0x8b, 0x68, 0x8e, 0x69, 0x7c, 0x1e, 0x2f, 0x53, 0xd0, 0xb9, 0x74, 0x7b, 0x58, 0x2c,
	0x5c, 0x75, 0x7b, 0xd4, 0x7f, 0x5c, 0x2f, 0xf5, 0xbd, 0x4b, 0x5f, 0x76, 0x03, 0x9b, 0x3a, 0xff,
	0xbf, 0xfe, 0xbe, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x31, 0x9b, 0xab, 0x13, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GenerateClient is the client API for Generate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenerateClient interface {
	GenerateCrypto(ctx context.Context, in *ReqKeyConfig, opts ...grpc.CallOption) (*RespKeyConfig, error)
	GenerateLeague(ctx context.Context, in *ReqCreateLeague, opts ...grpc.CallOption) (*RespCreateLeague, error)
	GenerateOrg(ctx context.Context, in *ReqCreateOrg, opts ...grpc.CallOption) (*RespCreateOrg, error)
	GenerateCsr(ctx context.Context, in *ReqCreateCsr, opts ...grpc.CallOption) (*RespCreateCsr, error)
	GenerateOrgNode(ctx context.Context, in *ReqCreateOrgNode, opts ...grpc.CallOption) (*RespCreateOrgNode, error)
	GenerateOrgUser(ctx context.Context, in *ReqCreateOrgUser, opts ...grpc.CallOption) (*RespCreateOrgUser, error)
	GenerateGenesisBlock(ctx context.Context, in *ReqGenesis, opts ...grpc.CallOption) (*RespGenesis, error)
	GenerateChannelTx(ctx context.Context, in *ReqChannelTx, opts ...grpc.CallOption) (*RespChannelTx, error)
}

type generateClient struct {
	cc *grpc.ClientConn
}

func NewGenerateClient(cc *grpc.ClientConn) GenerateClient {
	return &generateClient{cc}
}

func (c *generateClient) GenerateCrypto(ctx context.Context, in *ReqKeyConfig, opts ...grpc.CallOption) (*RespKeyConfig, error) {
	out := new(RespKeyConfig)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateClient) GenerateLeague(ctx context.Context, in *ReqCreateLeague, opts ...grpc.CallOption) (*RespCreateLeague, error) {
	out := new(RespCreateLeague)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateLeague", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateClient) GenerateOrg(ctx context.Context, in *ReqCreateOrg, opts ...grpc.CallOption) (*RespCreateOrg, error) {
	out := new(RespCreateOrg)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateClient) GenerateCsr(ctx context.Context, in *ReqCreateCsr, opts ...grpc.CallOption) (*RespCreateCsr, error) {
	out := new(RespCreateCsr)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateCsr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateClient) GenerateOrgNode(ctx context.Context, in *ReqCreateOrgNode, opts ...grpc.CallOption) (*RespCreateOrgNode, error) {
	out := new(RespCreateOrgNode)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateOrgNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateClient) GenerateOrgUser(ctx context.Context, in *ReqCreateOrgUser, opts ...grpc.CallOption) (*RespCreateOrgUser, error) {
	out := new(RespCreateOrgUser)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateOrgUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateClient) GenerateGenesisBlock(ctx context.Context, in *ReqGenesis, opts ...grpc.CallOption) (*RespGenesis, error) {
	out := new(RespGenesis)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generateClient) GenerateChannelTx(ctx context.Context, in *ReqChannelTx, opts ...grpc.CallOption) (*RespChannelTx, error) {
	out := new(RespChannelTx)
	err := c.cc.Invoke(ctx, "/generate.Generate/GenerateChannelTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerateServer is the server API for Generate service.
type GenerateServer interface {
	GenerateCrypto(context.Context, *ReqKeyConfig) (*RespKeyConfig, error)
	GenerateLeague(context.Context, *ReqCreateLeague) (*RespCreateLeague, error)
	GenerateOrg(context.Context, *ReqCreateOrg) (*RespCreateOrg, error)
	GenerateCsr(context.Context, *ReqCreateCsr) (*RespCreateCsr, error)
	GenerateOrgNode(context.Context, *ReqCreateOrgNode) (*RespCreateOrgNode, error)
	GenerateOrgUser(context.Context, *ReqCreateOrgUser) (*RespCreateOrgUser, error)
	GenerateGenesisBlock(context.Context, *ReqGenesis) (*RespGenesis, error)
	GenerateChannelTx(context.Context, *ReqChannelTx) (*RespChannelTx, error)
}

func RegisterGenerateServer(s *grpc.Server, srv GenerateServer) {
	s.RegisterService(&_Generate_serviceDesc, srv)
}

func _Generate_GenerateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKeyConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateCrypto(ctx, req.(*ReqKeyConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generate_GenerateLeague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateLeague)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateLeague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateLeague",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateLeague(ctx, req.(*ReqCreateLeague))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generate_GenerateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateOrg(ctx, req.(*ReqCreateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generate_GenerateCsr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateCsr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateCsr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateCsr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateCsr(ctx, req.(*ReqCreateCsr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generate_GenerateOrgNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateOrgNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateOrgNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateOrgNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateOrgNode(ctx, req.(*ReqCreateOrgNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generate_GenerateOrgUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateOrgUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateOrgUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateOrgUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateOrgUser(ctx, req.(*ReqCreateOrgUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generate_GenerateGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGenesis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateGenesisBlock(ctx, req.(*ReqGenesis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generate_GenerateChannelTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChannelTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerateServer).GenerateChannelTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generate.Generate/GenerateChannelTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerateServer).GenerateChannelTx(ctx, req.(*ReqChannelTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generate.Generate",
	HandlerType: (*GenerateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCrypto",
			Handler:    _Generate_GenerateCrypto_Handler,
		},
		{
			MethodName: "GenerateLeague",
			Handler:    _Generate_GenerateLeague_Handler,
		},
		{
			MethodName: "GenerateOrg",
			Handler:    _Generate_GenerateOrg_Handler,
		},
		{
			MethodName: "GenerateCsr",
			Handler:    _Generate_GenerateCsr_Handler,
		},
		{
			MethodName: "GenerateOrgNode",
			Handler:    _Generate_GenerateOrgNode_Handler,
		},
		{
			MethodName: "GenerateOrgUser",
			Handler:    _Generate_GenerateOrgUser_Handler,
		},
		{
			MethodName: "GenerateGenesisBlock",
			Handler:    _Generate_GenerateGenesisBlock_Handler,
		},
		{
			MethodName: "GenerateChannelTx",
			Handler:    _Generate_GenerateChannelTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/generate/server.proto",
}
