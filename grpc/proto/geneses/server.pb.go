// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/geneses/server.proto

package geneses

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("grpc/proto/geneses/server.proto", fileDescriptor_4a48986c5031badb) }

var fileDescriptor_4a48986c5031badb = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xeb, 0xc5, 0x42, 0x7a, 0x90, 0x8e, 0x9e, 0x16, 0x44, 0xe8, 0xcd, 0x83, 0x59, 0xb0,
	0x27, 0x3d, 0x6e, 0x45, 0x2f, 0x8a, 0x42, 0x3d, 0xa8, 0xb7, 0x6d, 0x98, 0xae, 0xc1, 0x38, 0xb3,
	0x4c, 0x52, 0xc1, 0xc7, 0xf6, 0x0d, 0x24, 0x9b, 0x4d, 0x2b, 0xb8, 0x87, 0xde, 0x92, 0x6f, 0xfe,
	0x2f, 0x19, 0x7e, 0x75, 0xd6, 0x48, 0x6b, 0xca, 0x56, 0x38, 0x70, 0xd9, 0x20, 0xa1, 0x47, 0x5f,
	0x7a, 0x94, 0x2f, 0x14, 0xdd, 0x41, 0x18, 0xf7, 0xb4, 0x38, 0x1d, 0x48, 0x1a, 0xa6, 0x75, 0xca,
	0x15, 0x43, 0x0f, 0x09, 0xfa, 0x8d, 0x0b, 0x29, 0x70, 0xf9, 0x73, 0xa0, 0xc6, 0x77, 0x71, 0x60,
	0x3d, 0xcc, 0xd5, 0x24, 0x1e, 0xa5, 0x0e, 0xf8, 0xfa, 0xe9, 0x60, 0xaa, 0x7b, 0x43, 0x67, 0x5a,
	0x1c, 0x6d, 0xd1, 0x32, 0x88, 0xa5, 0x66, 0x36, 0x82, 0x2b, 0x75, 0x9c, 0xc7, 0x0b, 0xf9, 0x6e,
	0x03, 0xdf, 0x5a, 0x87, 0x1e, 0x76, 0xc9, 0x44, 0xff, 0xa8, 0x8b, 0x87, 0x9b, 0xc7, 0x4d, 0x98,
	0x8d, 0xe0, 0x5a, 0x9d, 0x64, 0xb5, 0x5f, 0xa1, 0x72, 0x6c, 0x3e, 0xf6, 0x74, 0xa7, 0xdb, 0x6f,
	0xdf, 0x6b, 0x22, 0x74, 0xcf, 0x2f, 0x00, 0xbb, 0x5c, 0x66, 0x03, 0x6e, 0x75, 0xaf, 0xce, 0x2d,
	0x6b, 0x24, 0x62, 0xd6, 0xeb, 0x7a, 0x25, 0xd6, 0x5c, 0x18, 0x67, 0x91, 0x82, 0x8e, 0x6d, 0xa5,
	0x62, 0xb2, 0x55, 0x4d, 0x96, 0x5d, 0xef, 0x4f, 0x11, 0xbe, 0xc1, 0xff, 0x3a, 0x57, 0x87, 0xdd,
	0x75, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xec, 0x06, 0x66, 0xb4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GenesisClient is the client API for Genesis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenesisClient interface {
	// GenerateYml 生成区块链配置YML文件
	GenerateYml(ctx context.Context, in *Generate, opts ...grpc.CallOption) (*String, error)
	// GenerateCryptoFiles 生成区块链配置文件集合
	GenerateCryptoFiles(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*CMDOut, error)
	// GenerateGenesisBlock 生成区块链创世区块
	GenerateGenesisBlock(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*CMDOut, error)
	// GenerateChannelTX 生成区块链创世区块
	GenerateChannelTX(ctx context.Context, in *ChannelTX, opts ...grpc.CallOption) (*CMDOut, error)
}

type genesisClient struct {
	cc *grpc.ClientConn
}

func NewGenesisClient(cc *grpc.ClientConn) GenesisClient {
	return &genesisClient{cc}
}

func (c *genesisClient) GenerateYml(ctx context.Context, in *Generate, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/geneses.Genesis/GenerateYml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genesisClient) GenerateCryptoFiles(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*CMDOut, error) {
	out := new(CMDOut)
	err := c.cc.Invoke(ctx, "/geneses.Genesis/GenerateCryptoFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genesisClient) GenerateGenesisBlock(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*CMDOut, error) {
	out := new(CMDOut)
	err := c.cc.Invoke(ctx, "/geneses.Genesis/GenerateGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genesisClient) GenerateChannelTX(ctx context.Context, in *ChannelTX, opts ...grpc.CallOption) (*CMDOut, error) {
	out := new(CMDOut)
	err := c.cc.Invoke(ctx, "/geneses.Genesis/GenerateChannelTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenesisServer is the server API for Genesis service.
type GenesisServer interface {
	// GenerateYml 生成区块链配置YML文件
	GenerateYml(context.Context, *Generate) (*String, error)
	// GenerateCryptoFiles 生成区块链配置文件集合
	GenerateCryptoFiles(context.Context, *Crypto) (*CMDOut, error)
	// GenerateGenesisBlock 生成区块链创世区块
	GenerateGenesisBlock(context.Context, *Crypto) (*CMDOut, error)
	// GenerateChannelTX 生成区块链创世区块
	GenerateChannelTX(context.Context, *ChannelTX) (*CMDOut, error)
}

func RegisterGenesisServer(s *grpc.Server, srv GenesisServer) {
	s.RegisterService(&_Genesis_serviceDesc, srv)
}

func _Genesis_GenerateYml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenesisServer).GenerateYml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geneses.Genesis/GenerateYml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenesisServer).GenerateYml(ctx, req.(*Generate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Genesis_GenerateCryptoFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crypto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenesisServer).GenerateCryptoFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geneses.Genesis/GenerateCryptoFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenesisServer).GenerateCryptoFiles(ctx, req.(*Crypto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Genesis_GenerateGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crypto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenesisServer).GenerateGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geneses.Genesis/GenerateGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenesisServer).GenerateGenesisBlock(ctx, req.(*Crypto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Genesis_GenerateChannelTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelTX)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenesisServer).GenerateChannelTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geneses.Genesis/GenerateChannelTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenesisServer).GenerateChannelTX(ctx, req.(*ChannelTX))
	}
	return interceptor(ctx, in, info, handler)
}

var _Genesis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geneses.Genesis",
	HandlerType: (*GenesisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateYml",
			Handler:    _Genesis_GenerateYml_Handler,
		},
		{
			MethodName: "GenerateCryptoFiles",
			Handler:    _Genesis_GenerateCryptoFiles_Handler,
		},
		{
			MethodName: "GenerateGenesisBlock",
			Handler:    _Genesis_GenerateGenesisBlock_Handler,
		},
		{
			MethodName: "GenerateChannelTX",
			Handler:    _Genesis_GenerateChannelTX_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/geneses/server.proto",
}
