// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/proto/raft/server.proto

package raft

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("grpc/proto/raft/server.proto", fileDescriptor_9d6c725c45900cbb) }

var fileDescriptor_9d6c725c45900cbb = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x4a, 0x4c, 0x2b, 0xd1, 0x2f, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x03, 0x8b, 0x08, 0xb1, 0x80, 0x84, 0xa4, 0xa4, 0xd0, 0xd5, 0x80, 0x08, 0x88,
	0x0a, 0xa3, 0x5b, 0x8c, 0x5c, 0x2c, 0x41, 0x89, 0x69, 0x25, 0x42, 0xaa, 0x5c, 0x9c, 0x1e, 0xa9,
	0x89, 0x45, 0x25, 0x4e, 0xa9, 0x89, 0x25, 0x42, 0x5c, 0x7a, 0x60, 0x25, 0x20, 0xb6, 0x14, 0x12,
	0x5b, 0x89, 0x41, 0x48, 0x8f, 0x8b, 0x3b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x24, 0x2c, 0xbf,
	0x24, 0x55, 0x48, 0x10, 0x22, 0x19, 0x94, 0x5a, 0xe8, 0x9a, 0x93, 0x9a, 0x5c, 0x92, 0x99, 0x9f,
	0x07, 0x53, 0x1f, 0x94, 0x5a, 0x5c, 0xa0, 0xc4, 0x20, 0xa4, 0xc9, 0xc5, 0xe1, 0x96, 0x9f, 0x93,
	0x93, 0x5f, 0xee, 0x9b, 0x2a, 0xc4, 0x0f, 0x57, 0x0c, 0x11, 0x42, 0x53, 0xaa, 0xc2, 0xc5, 0xe1,
	0x93, 0x9a, 0x98, 0x92, 0x5a, 0xe4, 0x9b, 0x0a, 0x73, 0x80, 0x5f, 0x7e, 0x4a, 0x2a, 0x9a, 0x2a,
	0x2d, 0x2e, 0x8e, 0xe0, 0xca, 0xbc, 0x64, 0x90, 0x8c, 0x10, 0x2f, 0x42, 0x95, 0x6f, 0x62, 0x81,
	0x14, 0x2a, 0x57, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x47, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd9, 0xae, 0xf4, 0x19, 0x25, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	// HeartBeat 发送心跳
	HeartBeat(ctx context.Context, in *Beat, opts ...grpc.CallOption) (*Beat, error)
	// RequestVote 发起选举，索要选票
	RequestVote(ctx context.Context, in *ReqElection, opts ...grpc.CallOption) (*Resp, error)
	// FollowMe 成为Leader并要求被跟随
	FollowMe(ctx context.Context, in *ReqFollow, opts ...grpc.CallOption) (*Resp, error)
	// LeaderMe 请求Leader将自身加入follows
	LeaderMe(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Resp, error)
	// SyncNode 同步节点信息
	SyncNode(ctx context.Context, in *NodeMap, opts ...grpc.CallOption) (*NodeMap, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) HeartBeat(ctx context.Context, in *Beat, opts ...grpc.CallOption) (*Beat, error) {
	out := new(Beat)
	err := c.cc.Invoke(ctx, "/raft.Raft/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *ReqElection, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/raft.Raft/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) FollowMe(ctx context.Context, in *ReqFollow, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/raft.Raft/FollowMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) LeaderMe(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/raft.Raft/LeaderMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SyncNode(ctx context.Context, in *NodeMap, opts ...grpc.CallOption) (*NodeMap, error) {
	out := new(NodeMap)
	err := c.cc.Invoke(ctx, "/raft.Raft/SyncNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	// HeartBeat 发送心跳
	HeartBeat(context.Context, *Beat) (*Beat, error)
	// RequestVote 发起选举，索要选票
	RequestVote(context.Context, *ReqElection) (*Resp, error)
	// FollowMe 成为Leader并要求被跟随
	FollowMe(context.Context, *ReqFollow) (*Resp, error)
	// LeaderMe 请求Leader将自身加入follows
	LeaderMe(context.Context, *Node) (*Resp, error)
	// SyncNode 同步节点信息
	SyncNode(context.Context, *NodeMap) (*NodeMap, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).HeartBeat(ctx, req.(*Beat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqElection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*ReqElection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_FollowMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).FollowMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/FollowMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).FollowMe(ctx, req.(*ReqFollow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_LeaderMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).LeaderMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/LeaderMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).LeaderMe(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SyncNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SyncNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/SyncNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SyncNode(ctx, req.(*NodeMap))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _Raft_HeartBeat_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "FollowMe",
			Handler:    _Raft_FollowMe_Handler,
		},
		{
			MethodName: "LeaderMe",
			Handler:    _Raft_LeaderMe_Handler,
		},
		{
			MethodName: "SyncNode",
			Handler:    _Raft_SyncNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/raft/server.proto",
}
